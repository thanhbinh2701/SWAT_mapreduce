import torch
from PIL import Image
import open_clip
import numpy as np
import os

def predict_swat(image_path, model_path, classes_dir, top_k=3):
    """
    D·ª± ƒëo√°n l·ªõp c·ªßa ·∫£nh t·ª´ checkpoint SWAT (.pth)
    """
    # 1Ô∏è‚É£ Load class labels
    classes = sorted([d for d in os.listdir(classes_dir) if os.path.isdir(os.path.join(classes_dir, d))])
    if not classes:
        raise ValueError(f"Kh√¥ng t√¨m th·∫•y l·ªõp n√†o trong {classes_dir}")
    num_classes = len(classes)
    print(f"‚úÖ ƒê√£ ph√°t hi·ªán {num_classes} l·ªõp: {classes}")

    # 2Ô∏è‚É£ T·∫°o m√¥ h√¨nh CLIP gi·ªëng backbone SWAT d√πng
    clip_model, _, preprocess = open_clip.create_model_and_transforms(
        "ViT-B-32",  # ho·∫∑c ViT-B-16 n·∫øu checkpoint hu·∫•n luy·ªán b·∫±ng backbone n√†y
        pretrained=None
    )
    visual_encoder = clip_model.visual

    # 3Ô∏è‚É£ Head ph√¢n lo·∫°i (Linear)
    classifier = torch.nn.Linear(visual_encoder.output_dim, num_classes)
    logit_scale = torch.nn.Parameter(torch.tensor(1.0))

    # 4Ô∏è‚É£ Load checkpoint
    state = torch.load(model_path, map_location="cpu")
    print("üì¶ Keys trong checkpoint:", state.keys())

    # ‚úÖ Load backbone CLIP (d·∫°ng OrderedDict)
    visual_encoder.load_state_dict(state["clip"], strict=False)

    # ‚úÖ Load head
    classifier.load_state_dict(state["head"], strict=False)

    # ‚úÖ Load logit_scale
    if isinstance(state["logit_scale"], torch.Tensor):
        logit_scale.data = state["logit_scale"]
    else:
        logit_scale.data = torch.tensor(state["logit_scale"])

    # 5Ô∏è‚É£ Chuy·ªÉn sang thi·∫øt b·ªã
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    visual_encoder.to(device).eval()
    classifier.to(device).eval()
    logit_scale.to(device)

    # 6Ô∏è‚É£ Ti·ªÅn x·ª≠ l√Ω ·∫£nh
    image = preprocess(Image.open(image_path).convert("RGB")).unsqueeze(0).to(device)

    # 7Ô∏è‚É£ D·ª± ƒëo√°n
    with torch.no_grad():
        feats = visual_encoder(image)
        feats = feats / feats.norm(dim=-1, keepdim=True)
        logits = logit_scale.exp() * classifier(feats)
        probs = torch.softmax(logits, dim=-1)[0].cpu().numpy()

    # 8Ô∏è‚É£ L·∫•y top-k k·∫øt qu·∫£
    top_indices = np.argsort(probs)[-top_k:][::-1]
    return [(classes[i], float(probs[i])) for i in top_indices]


# ‚ñ∂Ô∏è V√≠ d·ª• s·ª≠ d·ª•ng
if __name__ == "__main__":
    results = predict_swat(
        image_path=r"C:\Users\binh\Downloads\t·∫£i xu·ªëng (1).jpg",
        model_path=r"D:\module\SWAT\output\CMLP_vitb32\output_recyclable\recyclable_CMLP_fewshot_text_4shots_seed1_50eps\stage3_model_best-epoch_10_best.pth",
        classes_dir=r"D:\Big-data\data\recyclable\images"
    )

    print("\nüîç K·∫øt qu·∫£ d·ª± ƒëo√°n:")
    for cls, prob in results:
        print(f"{cls}: {prob:.4f}")
